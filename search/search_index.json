{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to VecPP Acknowledgements Documentation The structure of the API reference part of this documentation is heavly inspired by the excellenent cppreference.com","title":"Home"},{"location":"#welcome-to-vecpp","text":"","title":"Welcome to VecPP"},{"location":"#acknowledgements","text":"","title":"Acknowledgements"},{"location":"#documentation","text":"The structure of the API reference part of this documentation is heavly inspired by the excellenent cppreference.com","title":"Documentation"},{"location":"reference/angle/","text":"Angle template typename T struct Angle; Angle is a wrapper type around a representation that helps manage angles in a consistent manner. Angle values are always kepts within the ]-PI, PI] range at all times. Member types Member Type Definition value_type T Member functions Member Behavior (destructor) does nothing operator= ovewrite the angle with another angle from_deg new angle from a degree value from_rad new angle from a radian value from_clamped_deg unsafe new angle from a degree value from_clamped_rad unsafe new angle from a radian value as_deg get the angle value as radians as_rad get the angle value as degrees Non-member functions Language support Function Behavior operator print to stream Binary operations Function Behavior operator== compares two angles for equality operator!= compares two angles for inequality operator compares two angles operator = compares two angles operator compares two angles operator = compares two angles operator-= in-place diff angles operator+= in-place add angles operator- diff angles operator+ add angles operator*= in-place scale angle operator/= in-place scale angle operator* scale angle operator/ scale angle Unary operations Function Behavior operator- (unary) negation Trigonometric functions Function Behavior sin sine cos cosine","title":"Angle"},{"location":"reference/angle/#angle","text":"template typename T struct Angle; Angle is a wrapper type around a representation that helps manage angles in a consistent manner. Angle values are always kepts within the ]-PI, PI] range at all times.","title":"Angle"},{"location":"reference/angle/#member-types","text":"Member Type Definition value_type T","title":"Member types"},{"location":"reference/angle/#member-functions","text":"Member Behavior (destructor) does nothing operator= ovewrite the angle with another angle from_deg new angle from a degree value from_rad new angle from a radian value from_clamped_deg unsafe new angle from a degree value from_clamped_rad unsafe new angle from a radian value as_deg get the angle value as radians as_rad get the angle value as degrees","title":"Member functions"},{"location":"reference/angle/#non-member-functions","text":"","title":"Non-member functions"},{"location":"reference/angle/#language-support","text":"Function Behavior operator print to stream","title":"Language support"},{"location":"reference/angle/#binary-operations","text":"Function Behavior operator== compares two angles for equality operator!= compares two angles for inequality operator compares two angles operator = compares two angles operator compares two angles operator = compares two angles operator-= in-place diff angles operator+= in-place add angles operator- diff angles operator+ add angles operator*= in-place scale angle operator/= in-place scale angle operator* scale angle operator/ scale angle","title":"Binary operations"},{"location":"reference/angle/#unary-operations","text":"Function Behavior operator- (unary) negation","title":"Unary operations"},{"location":"reference/angle/#trigonometric-functions","text":"Function Behavior sin sine cos cosine","title":"Trigonometric functions"},{"location":"reference/vec/","text":"Vec template typename T, std::size_t L struct Vec; In many respects, Vec behaves a lot like std::array , but with support for mathematical operations. Member types Member Type Definition value_type T Member functions Member Behavior (constructor) initalize the Vector using aggregate initialization (destructor) destroy every element in the vectpr operator= ovewrite the vector with another vector at access specific element with bounds checking operator[] access specific element data access underlying array Non-member functions Language support Function Behavior begin iterator to the beginning end iterator to the end operator print to stream Per-member operations Function Behavior operator== compares two vectors for equality operator!= compares two vectors for inequality operator-= per-member substraction operator+= per-member addition operator*= per-member multiplication operator/= per-member division operator- per-member substraction operator+ per-member addition operator* per-member multiplication operator/ per-member division abs per-member abs() min per-member min() max per-member max() Unary operations Function Behavior operator- (unary) negation Scalar operations Function Behavior operator/= (scalar) vector scaling operator*= (scalar) vector scaling operator/ (scalar) vector scaling operator* (scalar) vector scaling Geometric functions Function Behavior lenght get vector's euclidian length dot dot product cross cross product","title":"Vector"},{"location":"reference/vec/#vec","text":"template typename T, std::size_t L struct Vec; In many respects, Vec behaves a lot like std::array , but with support for mathematical operations.","title":"Vec"},{"location":"reference/vec/#member-types","text":"Member Type Definition value_type T","title":"Member types"},{"location":"reference/vec/#member-functions","text":"Member Behavior (constructor) initalize the Vector using aggregate initialization (destructor) destroy every element in the vectpr operator= ovewrite the vector with another vector at access specific element with bounds checking operator[] access specific element data access underlying array","title":"Member functions"},{"location":"reference/vec/#non-member-functions","text":"","title":"Non-member functions"},{"location":"reference/vec/#language-support","text":"Function Behavior begin iterator to the beginning end iterator to the end operator print to stream","title":"Language support"},{"location":"reference/vec/#per-member-operations","text":"Function Behavior operator== compares two vectors for equality operator!= compares two vectors for inequality operator-= per-member substraction operator+= per-member addition operator*= per-member multiplication operator/= per-member division operator- per-member substraction operator+ per-member addition operator* per-member multiplication operator/ per-member division abs per-member abs() min per-member min() max per-member max()","title":"Per-member operations"},{"location":"reference/vec/#unary-operations","text":"Function Behavior operator- (unary) negation","title":"Unary operations"},{"location":"reference/vec/#scalar-operations","text":"Function Behavior operator/= (scalar) vector scaling operator*= (scalar) vector scaling operator/ (scalar) vector scaling operator* (scalar) vector scaling","title":"Scalar operations"},{"location":"reference/vec/#geometric-functions","text":"Function Behavior lenght get vector's euclidian length dot dot product cross cross product","title":"Geometric functions"},{"location":"reference/angle/arithmetic/","text":"vecpp :: Angle typename> vecpp::operator+,-(vecpp::Angle) template typename T constexpr Angle T operator+(const Angle T lhs, const Angle T rhs); template typename T constexpr Angle T operator-(const Angle T lhs, const Angle T rhs); Numerically combine two angles. Parameters Argument Role lhs The left-hand side of the operation rhs The right-hand side of the operation Return value An angle containing either the sum or difference of the angles Example #include vecpp/vecpp.h #include iostream int main() { using Angle = vecpp::Angle float ; auto angle_a = Angle::from_deg(90.0f); auto angle_b = Angle::from_deg(180.0f); auto angle_c = angle_a + angle_b; std::cout angle_c \\n ; } Output: -90\u00b0 See also operator+=,-=()","title":"Arithmetic"},{"location":"reference/angle/arithmetic/#vecppoperator-vecppangle","text":"template typename T constexpr Angle T operator+(const Angle T lhs, const Angle T rhs); template typename T constexpr Angle T operator-(const Angle T lhs, const Angle T rhs); Numerically combine two angles.","title":"vecpp::operator+,-(vecpp::Angle)"},{"location":"reference/angle/arithmetic/#parameters","text":"Argument Role lhs The left-hand side of the operation rhs The right-hand side of the operation","title":"Parameters"},{"location":"reference/angle/arithmetic/#return-value","text":"An angle containing either the sum or difference of the angles","title":"Return value"},{"location":"reference/angle/arithmetic/#example","text":"#include vecpp/vecpp.h #include iostream int main() { using Angle = vecpp::Angle float ; auto angle_a = Angle::from_deg(90.0f); auto angle_b = Angle::from_deg(180.0f); auto angle_c = angle_a + angle_b; std::cout angle_c \\n ; } Output: -90\u00b0","title":"Example"},{"location":"reference/angle/arithmetic/#see-also","text":"operator+=,-=()","title":"See also"},{"location":"reference/angle/arithmetic_inplace/","text":"vecpp :: Angle typename> vecpp::operator+=,-=(vecpp::Angle) template typename T constexpr Angle T operator+=(Angle T lhs, const Angle T rhs); template typename T constexpr Angle T operator-=(Angle T lhs, const Angle T rhs); Numerically combine two angles, storing the result into the first. Parameters Argument Role lhs The left-hand side of the operation and the destination rhs The right-hand side of the operation Return value A reference to lhs Example #include vecpp/vecpp.h #include iostream int main() { using Angle = vecpp::Angle float ; auto angle_a = Angle::from_deg(90.0f); auto angle_b = Angle::from_deg(180.0f); angle_a += angle_b; std::cout angle_a \\n ; } Output: -90\u00b0 See also operator+,-()","title":"Arithmetic inplace"},{"location":"reference/angle/arithmetic_inplace/#vecppoperator-vecppangle","text":"template typename T constexpr Angle T operator+=(Angle T lhs, const Angle T rhs); template typename T constexpr Angle T operator-=(Angle T lhs, const Angle T rhs); Numerically combine two angles, storing the result into the first.","title":"vecpp::operator+=,-=(vecpp::Angle)"},{"location":"reference/angle/arithmetic_inplace/#parameters","text":"Argument Role lhs The left-hand side of the operation and the destination rhs The right-hand side of the operation","title":"Parameters"},{"location":"reference/angle/arithmetic_inplace/#return-value","text":"A reference to lhs","title":"Return value"},{"location":"reference/angle/arithmetic_inplace/#example","text":"#include vecpp/vecpp.h #include iostream int main() { using Angle = vecpp::Angle float ; auto angle_a = Angle::from_deg(90.0f); auto angle_b = Angle::from_deg(180.0f); angle_a += angle_b; std::cout angle_a \\n ; } Output: -90\u00b0","title":"Example"},{"location":"reference/angle/arithmetic_inplace/#see-also","text":"operator+,-()","title":"See also"},{"location":"reference/angle/as/","text":"vecpp :: Angle typename> vecpp::Angle::as_deg,as_rad constexpr T as_deg() const; constexpr T as_rad() const; Obtain the numerical value of the angle in the requested unit. Return value A scalar value containing the angle within the requested unit. Example #include vecpp/vecpp.h #include iostream int main() { using Angle = vecpp::Angle float ; auto angle = Angle::from_deg(90.0f); std::cout angle.as_rad() \\n ; } Output: 1.5708","title":"As"},{"location":"reference/angle/as/#vecppangleas_degas_rad","text":"constexpr T as_deg() const; constexpr T as_rad() const; Obtain the numerical value of the angle in the requested unit.","title":"vecpp::Angle::as_deg,as_rad"},{"location":"reference/angle/as/#return-value","text":"A scalar value containing the angle within the requested unit.","title":"Return value"},{"location":"reference/angle/as/#example","text":"#include vecpp/vecpp.h #include iostream int main() { using Angle = vecpp::Angle float ; auto angle = Angle::from_deg(90.0f); std::cout angle.as_rad() \\n ; } Output: 1.5708","title":"Example"},{"location":"reference/angle/format/","text":"vecpp :: Angle typename> vecpp::operator (vecpp::Angle) template typename T constexpr std::ostream operator (std::ostream stream, const Angle T angle); Formats the angle into the passed std::ostream . The angle will be represented as {DEG}\u00b0, where the output of DEG is delegated to operator (std::ostream , T) . This is equivalent to: stream angle.as_deg() \u00b0 ; Parameters Argument Role stream The destination stream angle The angle to format Return value A reference to stream Example #include vecpp/vecpp.h #include iostream int main() { using Angle = vecpp::Angle float ; auto angle_a = Angle::from_deg(90.0f); auto angle_b = Angle::from_deg(270.0f); std::cout angle_a , angle_b \\n ; } Output: 90\u00b0, -90\u00b0","title":"Format"},{"location":"reference/angle/format/#vecppoperatorvecppangle","text":"template typename T constexpr std::ostream operator (std::ostream stream, const Angle T angle); Formats the angle into the passed std::ostream . The angle will be represented as {DEG}\u00b0, where the output of DEG is delegated to operator (std::ostream , T) . This is equivalent to: stream angle.as_deg() \u00b0 ;","title":"vecpp::operator&lt;&lt;(vecpp::Angle)"},{"location":"reference/angle/format/#parameters","text":"Argument Role stream The destination stream angle The angle to format","title":"Parameters"},{"location":"reference/angle/format/#return-value","text":"A reference to stream","title":"Return value"},{"location":"reference/angle/format/#example","text":"#include vecpp/vecpp.h #include iostream int main() { using Angle = vecpp::Angle float ; auto angle_a = Angle::from_deg(90.0f); auto angle_b = Angle::from_deg(270.0f); std::cout angle_a , angle_b \\n ; } Output: 90\u00b0, -90\u00b0","title":"Example"},{"location":"reference/angle/from/","text":"vecpp :: Angle typename> vecpp::Angle::from_deg,from_rad static constexpr Angle from_deg(const T val); static constexpr Angle from_rad(const T val); Creates a new Angle from a raw value in a given unit. The angle will be re-mapped in the ]-PI,PI] radians range. Parameters Argument Role val The raw angle value in the matching unit Return value An Angle instance representing the angle. Example #include vecpp/vecpp.h #include iostream int main() { using Angle = vecpp::Angle float ; auto angle_a = Angle::from_deg(90.0f); auto angle_b = Angle::from_deg(270.0f); std::cout angle_a , angle_b \\n ; } Output: 90\u00b0, -90\u00b0 See also from_clamped_* : Create from clamped value.","title":"From"},{"location":"reference/angle/from/#vecppanglefrom_degfrom_rad","text":"static constexpr Angle from_deg(const T val); static constexpr Angle from_rad(const T val); Creates a new Angle from a raw value in a given unit. The angle will be re-mapped in the ]-PI,PI] radians range.","title":"vecpp::Angle::from_deg,from_rad"},{"location":"reference/angle/from/#parameters","text":"Argument Role val The raw angle value in the matching unit","title":"Parameters"},{"location":"reference/angle/from/#return-value","text":"An Angle instance representing the angle.","title":"Return value"},{"location":"reference/angle/from/#example","text":"#include vecpp/vecpp.h #include iostream int main() { using Angle = vecpp::Angle float ; auto angle_a = Angle::from_deg(90.0f); auto angle_b = Angle::from_deg(270.0f); std::cout angle_a , angle_b \\n ; } Output: 90\u00b0, -90\u00b0","title":"Example"},{"location":"reference/angle/from/#see-also","text":"from_clamped_* : Create from clamped value.","title":"See also"},{"location":"reference/angle/from_clamped/","text":"vecpp :: Angle typename> vecpp::Angle::from_clamped_deg,from_clamped_rad static constexpr Angle from_clamped_deg(const T val); static constexpr Angle from_clamped_rad(const T val); Creates a new Angle from a raw value in a given unit. Calling from_clamped_deg() with val not within the ]-180,180] range, or from_clamped_deg() with val not within the ]-PI,PI] range is undefined behavior . These functions are unsafe and should only be used to leverage situations where you are certain that the precondition is met. Parameters Argument Role val The raw angle value in the matching unit Return value An Angle instance representing the angle. Example #include vecpp/vecpp.h #include iostream int main() { using Angle = vecpp::Angle float ; auto angle_a = Angle::from_clamped_deg(90.0f); auto angle_b = Angle::from_clamped_deg(-90.0f); std::cout angle_a , angle_b \\n ; } Output: 90\u00b0, -90\u00b0 See also from_* : Create from unclamped value.","title":"From clamped"},{"location":"reference/angle/from_clamped/#vecppanglefrom_clamped_degfrom_clamped_rad","text":"static constexpr Angle from_clamped_deg(const T val); static constexpr Angle from_clamped_rad(const T val); Creates a new Angle from a raw value in a given unit. Calling from_clamped_deg() with val not within the ]-180,180] range, or from_clamped_deg() with val not within the ]-PI,PI] range is undefined behavior . These functions are unsafe and should only be used to leverage situations where you are certain that the precondition is met.","title":"vecpp::Angle::from_clamped_deg,from_clamped_rad"},{"location":"reference/angle/from_clamped/#parameters","text":"Argument Role val The raw angle value in the matching unit","title":"Parameters"},{"location":"reference/angle/from_clamped/#return-value","text":"An Angle instance representing the angle.","title":"Return value"},{"location":"reference/angle/from_clamped/#example","text":"#include vecpp/vecpp.h #include iostream int main() { using Angle = vecpp::Angle float ; auto angle_a = Angle::from_clamped_deg(90.0f); auto angle_b = Angle::from_clamped_deg(-90.0f); std::cout angle_a , angle_b \\n ; } Output: 90\u00b0, -90\u00b0","title":"Example"},{"location":"reference/angle/from_clamped/#see-also","text":"from_* : Create from unclamped value.","title":"See also"},{"location":"reference/angle/op_cmp/","text":"vecpp :: Angle typename> vecpp::operator==,!=, , =, , =(vecpp::Angle) template typename T constexpr bool operator==(const Angle T lhs, const Angle T rhs); template typename T constexpr bool operator!=(const Angle T lhs, const Angle T rhs); template typename T constexpr bool operator (const Angle T lhs, const Angle T rhs); template typename T constexpr bool operator =(const Angle T lhs, const Angle T rhs); template typename T constexpr bool operator (const Angle T lhs, const Angle T rhs); template typename T constexpr bool operator =(const Angle T lhs, const Angle T rhs); Numerically compare two angles. The test is performed on the clamped value. Parameters Argument Role lhs The left-hand side of the comparison rhs The right-hand side of the comparison Return value Wether or not the numeric test passes. Example #include vecpp/vecpp.h #include iostream int main() { using Angle = vecpp::Angle float ; auto angle_a = Angle::from_deg(91.0f); auto angle_b = Angle::from_deg(450.0f); assert(angle_a angle_b); }","title":"Op cmp"},{"location":"reference/angle/op_cmp/#vecppoperatorvecppangle","text":"template typename T constexpr bool operator==(const Angle T lhs, const Angle T rhs); template typename T constexpr bool operator!=(const Angle T lhs, const Angle T rhs); template typename T constexpr bool operator (const Angle T lhs, const Angle T rhs); template typename T constexpr bool operator =(const Angle T lhs, const Angle T rhs); template typename T constexpr bool operator (const Angle T lhs, const Angle T rhs); template typename T constexpr bool operator =(const Angle T lhs, const Angle T rhs); Numerically compare two angles. The test is performed on the clamped value.","title":"vecpp::operator==,!=,&lt;,&lt;=,&gt;,&gt;=(vecpp::Angle)"},{"location":"reference/angle/op_cmp/#parameters","text":"Argument Role lhs The left-hand side of the comparison rhs The right-hand side of the comparison","title":"Parameters"},{"location":"reference/angle/op_cmp/#return-value","text":"Wether or not the numeric test passes.","title":"Return value"},{"location":"reference/angle/op_cmp/#example","text":"#include vecpp/vecpp.h #include iostream int main() { using Angle = vecpp::Angle float ; auto angle_a = Angle::from_deg(91.0f); auto angle_b = Angle::from_deg(450.0f); assert(angle_a angle_b); }","title":"Example"},{"location":"reference/angle/scale/","text":"vecpp :: Angle typename> vecpp::operator*,/(vecpp::Angle) template typename T constexpr Angle T operator*(const Angle T angle, const T factor); template typename T constexpr Angle T operator*(const T factor, Angle T angle); template typename T constexpr Angle T operator/(const Angle T angle, const T factor); Compute the scaled value of an angle. Parameters Argument Role angle The angle to scale factor The value by which to multiply (or divide) the angle Return value An Angle containing the scaled value of angle Example #include vecpp/vecpp.h #include iostream int main() { using Angle = vecpp::Angle float ; auto angle_a = Angle::from_deg(90.0f); auto angle_c = 3.0f * angle_a; std::cout angle_c \\n ; } Output: -90\u00b0 See also operator*=,/=()","title":"Scale"},{"location":"reference/angle/scale/#vecppoperatorvecppangle","text":"template typename T constexpr Angle T operator*(const Angle T angle, const T factor); template typename T constexpr Angle T operator*(const T factor, Angle T angle); template typename T constexpr Angle T operator/(const Angle T angle, const T factor); Compute the scaled value of an angle.","title":"vecpp::operator*,/(vecpp::Angle)"},{"location":"reference/angle/scale/#parameters","text":"Argument Role angle The angle to scale factor The value by which to multiply (or divide) the angle","title":"Parameters"},{"location":"reference/angle/scale/#return-value","text":"An Angle containing the scaled value of angle","title":"Return value"},{"location":"reference/angle/scale/#example","text":"#include vecpp/vecpp.h #include iostream int main() { using Angle = vecpp::Angle float ; auto angle_a = Angle::from_deg(90.0f); auto angle_c = 3.0f * angle_a; std::cout angle_c \\n ; } Output: -90\u00b0","title":"Example"},{"location":"reference/angle/scale/#see-also","text":"operator*=,/=()","title":"See also"},{"location":"reference/angle/scale_inplace/","text":"vecpp :: Angle typename> vecpp::operator*,/(vecpp::Angle) template typename T constexpr Angle T operator*=(Angle T angle, const T factor); template typename T constexpr Angle T operator/=(Angle T angle, const T factor); Compute the scaled value of an angle in-place. Parameters Argument Role angle The angle to scale factor The value by which to multiply (or divide) the angle Return value A reference to angle , which has been scaled by factor Example #include vecpp/vecpp.h #include iostream int main() { using Angle = vecpp::Angle float ; auto angle_a = Angle::from_deg(90.0f); angle_a *= 3.0f; std::cout angle_a \\n ; } Output: -90\u00b0 See also operator*,/()","title":"Scale inplace"},{"location":"reference/angle/scale_inplace/#vecppoperatorvecppangle","text":"template typename T constexpr Angle T operator*=(Angle T angle, const T factor); template typename T constexpr Angle T operator/=(Angle T angle, const T factor); Compute the scaled value of an angle in-place.","title":"vecpp::operator*,/(vecpp::Angle)"},{"location":"reference/angle/scale_inplace/#parameters","text":"Argument Role angle The angle to scale factor The value by which to multiply (or divide) the angle","title":"Parameters"},{"location":"reference/angle/scale_inplace/#return-value","text":"A reference to angle , which has been scaled by factor","title":"Return value"},{"location":"reference/angle/scale_inplace/#example","text":"#include vecpp/vecpp.h #include iostream int main() { using Angle = vecpp::Angle float ; auto angle_a = Angle::from_deg(90.0f); angle_a *= 3.0f; std::cout angle_a \\n ; } Output: -90\u00b0","title":"Example"},{"location":"reference/angle/scale_inplace/#see-also","text":"operator*,/()","title":"See also"},{"location":"reference/angle/unary_minus/","text":"vecpp :: Angle typename> vecpp::operator-(vecpp::Angle) unary template typename T constexpr Angle T operator-(const Angle T rhs); Returns the negated version of the angle Keep in mind that in the angle's clamp space, -PI == PI. Parameters Argument Role rhs The angle to negate Return value An angle of inverse magnitude from 'rhs' Example #include vecpp/vecpp.h #include cassert int main() { using Angle = vecpp::Angle float ; auto angle_a = Angle::from_deg(90.0f); auto angle_b = Angle::from_deg(180.0f); std::cout -angle_a -angle_b \\n ; } Output: -90\u00b0 180\u00b0","title":"Unary minus"},{"location":"reference/angle/unary_minus/#vecppoperator-vecppangleunary","text":"template typename T constexpr Angle T operator-(const Angle T rhs); Returns the negated version of the angle Keep in mind that in the angle's clamp space, -PI == PI.","title":"vecpp::operator-(vecpp::Angle)unary"},{"location":"reference/angle/unary_minus/#parameters","text":"Argument Role rhs The angle to negate","title":"Parameters"},{"location":"reference/angle/unary_minus/#return-value","text":"An angle of inverse magnitude from 'rhs'","title":"Return value"},{"location":"reference/angle/unary_minus/#example","text":"#include vecpp/vecpp.h #include cassert int main() { using Angle = vecpp::Angle float ; auto angle_a = Angle::from_deg(90.0f); auto angle_b = Angle::from_deg(180.0f); std::cout -angle_a -angle_b \\n ; } Output: -90\u00b0 180\u00b0","title":"Example"},{"location":"reference/vec/abs/","text":"vecpp :: Vec typename, size_t> vecpp::abs(vecpp::Vec) template typename T, std::size_t L constexpr Vec T,L abs(const Vec T,L vec); Performs std::abs() member-wise on a vector. Parameters Argument Role vec The vector to consume Return value A Vector containing the member-wise absolute value of the input vector. Example #include vecpp/vecpp.h #include cassert int main() { using fVec2 = vecpp::Vec float, 2 ; fVec2 a = {10.0f, -5.0f}; fVec2 b = abs(a); assert(b[0] == 10.0f); assert(b[1] == 5.0f); }","title":"Abs"},{"location":"reference/vec/abs/#vecppabsvecppvec","text":"template typename T, std::size_t L constexpr Vec T,L abs(const Vec T,L vec); Performs std::abs() member-wise on a vector.","title":"vecpp::abs(vecpp::Vec)"},{"location":"reference/vec/abs/#parameters","text":"Argument Role vec The vector to consume","title":"Parameters"},{"location":"reference/vec/abs/#return-value","text":"A Vector containing the member-wise absolute value of the input vector.","title":"Return value"},{"location":"reference/vec/abs/#example","text":"#include vecpp/vecpp.h #include cassert int main() { using fVec2 = vecpp::Vec float, 2 ; fVec2 a = {10.0f, -5.0f}; fVec2 b = abs(a); assert(b[0] == 10.0f); assert(b[1] == 5.0f); }","title":"Example"},{"location":"reference/vec/at/","text":"vecpp :: Vec typename, size_t> vecpp::Vec::at() constexpr T at(std::size_t i); constexpr const T at(std::size_t i) const; Parameters Argument Role i index of the element to access. Return value A reference to the requested element. Exceptions std::out_of_range See also operator[] : Access without bounds checking.","title":"At"},{"location":"reference/vec/at/#vecppvecat","text":"constexpr T at(std::size_t i); constexpr const T at(std::size_t i) const;","title":"vecpp::Vec::at()"},{"location":"reference/vec/at/#parameters","text":"Argument Role i index of the element to access.","title":"Parameters"},{"location":"reference/vec/at/#return-value","text":"A reference to the requested element.","title":"Return value"},{"location":"reference/vec/at/#exceptions","text":"std::out_of_range","title":"Exceptions"},{"location":"reference/vec/at/#see-also","text":"operator[] : Access without bounds checking.","title":"See also"},{"location":"reference/vec/begin/","text":"vecpp :: Vec typename, size_t> vecpp::begin(vecpp::Vec) template typename T, std::size_t L constexpr T* begin(Vec T,L v); template typename T, std::size_t L constexpr const T* begin(const Vec T,L v); Returns an iterator to the first element of the vector. This can be used directly, or indirectly through a range-based for loop. Parameters Argument Role v The vector to get the iterator from Return value Iterator to the first element. Example #include vecpp/vecpp.h #include numeric float sum_elements(const vecpp::Vec float, 3 v) { return std::accumulate(begin(v), end(v), 0.0f); } See also end : Returns an iterator to the end.","title":"Begin"},{"location":"reference/vec/begin/#vecppbeginvecppvec","text":"template typename T, std::size_t L constexpr T* begin(Vec T,L v); template typename T, std::size_t L constexpr const T* begin(const Vec T,L v); Returns an iterator to the first element of the vector. This can be used directly, or indirectly through a range-based for loop.","title":"vecpp::begin(vecpp::Vec)"},{"location":"reference/vec/begin/#parameters","text":"Argument Role v The vector to get the iterator from","title":"Parameters"},{"location":"reference/vec/begin/#return-value","text":"Iterator to the first element.","title":"Return value"},{"location":"reference/vec/begin/#example","text":"#include vecpp/vecpp.h #include numeric float sum_elements(const vecpp::Vec float, 3 v) { return std::accumulate(begin(v), end(v), 0.0f); }","title":"Example"},{"location":"reference/vec/begin/#see-also","text":"end : Returns an iterator to the end.","title":"See also"},{"location":"reference/vec/constructor/","text":"vecpp :: Vec typename, size_t> vecpp::Vec::Vec Vec T, L does not define a constructor per-se, but instead relies entirely on aggregate initialization. default construction Default-constructing a vector will leave it in an undefined state. N.B. Default-constructed vectors are not allowed in constexpr code, which is why you might see some Vec v = {}; within the vecpp codebase where default initialization would have made sense. Examples: // default construction Vec float, 3 vec; // value-construction Vec float, 3 y_axis = {0.0f, 1.0f, 0.0f}; // copy-construction Vec float, 3 y_axis_copy = y_axis;","title":"Constructor"},{"location":"reference/vec/constructor/#vecppvecvec","text":"Vec T, L does not define a constructor per-se, but instead relies entirely on aggregate initialization.","title":"vecpp::Vec::Vec"},{"location":"reference/vec/constructor/#default-construction","text":"Default-constructing a vector will leave it in an undefined state. N.B. Default-constructed vectors are not allowed in constexpr code, which is why you might see some Vec v = {}; within the vecpp codebase where default initialization would have made sense.","title":"default construction"},{"location":"reference/vec/constructor/#examples","text":"// default construction Vec float, 3 vec; // value-construction Vec float, 3 y_axis = {0.0f, 1.0f, 0.0f}; // copy-construction Vec float, 3 y_axis_copy = y_axis;","title":"Examples:"},{"location":"reference/vec/cross/","text":"vecpp :: Vec typename, size_t> vecpp::cross(vecpp::Vec) template typename T constexpr T cross(const Vec T,3 lhs, const Vec T,3 rhs); Computes the cross product between two three-dimensional vectors. Parameters Argument Role lhs The first vector operand rhs The second vector operand Return value The cross product of the passed vectors. Example #include vecpp/vecpp.h #include cassert int main() { using fVec3 = vecpp::Vec float, 3 ; fVec3 x = {1.0f, 0.0f, 0.0f}; fVec3 y = {0.0f, 1.0f, 0.0f}; fVec3 z = {0.0f, 0.0f, 1.0f}; fVec3 cross_val = cross(x, y); assert(length(cross_val-z) 0.0001f); }","title":"Cross"},{"location":"reference/vec/cross/#vecppcrossvecppvec","text":"template typename T constexpr T cross(const Vec T,3 lhs, const Vec T,3 rhs); Computes the cross product between two three-dimensional vectors.","title":"vecpp::cross(vecpp::Vec)"},{"location":"reference/vec/cross/#parameters","text":"Argument Role lhs The first vector operand rhs The second vector operand","title":"Parameters"},{"location":"reference/vec/cross/#return-value","text":"The cross product of the passed vectors.","title":"Return value"},{"location":"reference/vec/cross/#example","text":"#include vecpp/vecpp.h #include cassert int main() { using fVec3 = vecpp::Vec float, 3 ; fVec3 x = {1.0f, 0.0f, 0.0f}; fVec3 y = {0.0f, 1.0f, 0.0f}; fVec3 z = {0.0f, 0.0f, 1.0f}; fVec3 cross_val = cross(x, y); assert(length(cross_val-z) 0.0001f); }","title":"Example"},{"location":"reference/vec/data/","text":"vecpp :: Vec typename, size_t> vecpp::Vec::data() constexpr T* data(); constexpr const T* data() const; Return value A pointer to the underlying storage.","title":"Data"},{"location":"reference/vec/data/#vecppvecdata","text":"constexpr T* data(); constexpr const T* data() const;","title":"vecpp::Vec::data()"},{"location":"reference/vec/data/#return-value","text":"A pointer to the underlying storage.","title":"Return value"},{"location":"reference/vec/dot/","text":"vecpp :: Vec typename, size_t> vecpp::dot(vecpp::Vec) template typename T, std::size_t L constexpr T dot(const Vec T,L lhs, const Vec T,L rhs); Returns the dot product of the thw argument vectors Parameters Argument Role lhs The first vector operand rhs The second vector operand Return value The dot product of the passed vectors. Example #include vecpp/vecpp.h #include cassert int main() { using fVec2 = vecpp::Vec float, 2 ; fVec2 a = {3.0f, 0.0f}; fVec2 b = {1.0f, 1.0f}; float dot_val = dot(a, b); assert(dot_val == 3.0f); }","title":"Dot"},{"location":"reference/vec/dot/#vecppdotvecppvec","text":"template typename T, std::size_t L constexpr T dot(const Vec T,L lhs, const Vec T,L rhs); Returns the dot product of the thw argument vectors","title":"vecpp::dot(vecpp::Vec)"},{"location":"reference/vec/dot/#parameters","text":"Argument Role lhs The first vector operand rhs The second vector operand","title":"Parameters"},{"location":"reference/vec/dot/#return-value","text":"The dot product of the passed vectors.","title":"Return value"},{"location":"reference/vec/dot/#example","text":"#include vecpp/vecpp.h #include cassert int main() { using fVec2 = vecpp::Vec float, 2 ; fVec2 a = {3.0f, 0.0f}; fVec2 b = {1.0f, 1.0f}; float dot_val = dot(a, b); assert(dot_val == 3.0f); }","title":"Example"},{"location":"reference/vec/end/","text":"vecpp :: Vec typename, size_t> vecpp::end(vecpp::Vec) template typename T, std::size_t L constexpr T* end(Vec T,L v); template typename T, std::size_t L constexpr const T* end(const Vec T,L v); Returns a past-the-end iterator for the provided vector. Parameters Argument Role v The vector to get the iterator from Return value iterator tpast the last element. See also begin : Returns an iterator to the end.","title":"End"},{"location":"reference/vec/end/#vecppendvecppvec","text":"template typename T, std::size_t L constexpr T* end(Vec T,L v); template typename T, std::size_t L constexpr const T* end(const Vec T,L v); Returns a past-the-end iterator for the provided vector.","title":"vecpp::end(vecpp::Vec)"},{"location":"reference/vec/end/#parameters","text":"Argument Role v The vector to get the iterator from","title":"Parameters"},{"location":"reference/vec/end/#return-value","text":"iterator tpast the last element.","title":"Return value"},{"location":"reference/vec/end/#see-also","text":"begin : Returns an iterator to the end.","title":"See also"},{"location":"reference/vec/format/","text":"vecpp :: Vec typename, size_t> vecpp::operator (vecpp::Vec) template typename T, std::size_t L constexpr std::ostream operator (std::ostream stream, const Vec T,L vec); Formats the vector into the passed std::ostream . The format is (a, b, c, ...) , where the individual members are generated using operator (std::ostream , T) . Parameters Argument Role stream The destination stream vec The vector to format Return value A reference to stream Example #include vecpp/vecpp.h #include iostream int main() { using Vec3 = vecpp::Vec int, 3 ; Vec3 vec = {1, 2, 3}; std::cout vec \\n ; } Output: (1, 2, 3)","title":"Format"},{"location":"reference/vec/format/#vecppoperatorvecppvec","text":"template typename T, std::size_t L constexpr std::ostream operator (std::ostream stream, const Vec T,L vec); Formats the vector into the passed std::ostream . The format is (a, b, c, ...) , where the individual members are generated using operator (std::ostream , T) .","title":"vecpp::operator&lt;&lt;(vecpp::Vec)"},{"location":"reference/vec/format/#parameters","text":"Argument Role stream The destination stream vec The vector to format","title":"Parameters"},{"location":"reference/vec/format/#return-value","text":"A reference to stream","title":"Return value"},{"location":"reference/vec/format/#example","text":"#include vecpp/vecpp.h #include iostream int main() { using Vec3 = vecpp::Vec int, 3 ; Vec3 vec = {1, 2, 3}; std::cout vec \\n ; } Output: (1, 2, 3)","title":"Example"},{"location":"reference/vec/length/","text":"vecpp :: Vec typename, size_t> vecpp::length(vecpp::Vec) template typename T, std::size_t L constexpr T length(const Vec T,L arg); Returns the eunclidian norm of the vector Parameters Argument Role arg The vector we want the legnth of Return value The length of the vector. Example #include vecpp/vecpp.h #include cassert int main() { using fVec2 = vecpp::Vec float, 2 ; fVec2 a = {3.0f, 0.0f}; fVec2 b = {1.0f, 1.0f}; assert(length(a) == 3.0f); assert(length(b) == std::sqrt(2.0f)); }","title":"Length"},{"location":"reference/vec/length/#vecpplengthvecppvec","text":"template typename T, std::size_t L constexpr T length(const Vec T,L arg); Returns the eunclidian norm of the vector","title":"vecpp::length(vecpp::Vec)"},{"location":"reference/vec/length/#parameters","text":"Argument Role arg The vector we want the legnth of","title":"Parameters"},{"location":"reference/vec/length/#return-value","text":"The length of the vector.","title":"Return value"},{"location":"reference/vec/length/#example","text":"#include vecpp/vecpp.h #include cassert int main() { using fVec2 = vecpp::Vec float, 2 ; fVec2 a = {3.0f, 0.0f}; fVec2 b = {1.0f, 1.0f}; assert(length(a) == 3.0f); assert(length(b) == std::sqrt(2.0f)); }","title":"Example"},{"location":"reference/vec/max/","text":"vecpp :: Vec typename, size_t> vecpp::max(vecpp::Vec) template typename T, std::size_t L constexpr Vec T,L max(const Vec T,L lhs, const Vec T,L rhs); Performs std::max() member-wise on two vectors. Parameters Argument Role lhs The first vector to consume rhs The second vector to consume Return value A Vector containing the member-wise largest element of each input vector. Example #include vecpp/vecpp.h #include cassert int main() { using fVec2 = vecpp::Vec float, 2 ; fVec2 a = {10.0f, 5.0f}; fVec2 b = {5.0f, 6.0f}; fVec2 c = max(a,b); assert(c[0] == 10.0f); assert(c[1] == 6.0f); } See also min : per-member min()","title":"Max"},{"location":"reference/vec/max/#vecppmaxvecppvec","text":"template typename T, std::size_t L constexpr Vec T,L max(const Vec T,L lhs, const Vec T,L rhs); Performs std::max() member-wise on two vectors.","title":"vecpp::max(vecpp::Vec)"},{"location":"reference/vec/max/#parameters","text":"Argument Role lhs The first vector to consume rhs The second vector to consume","title":"Parameters"},{"location":"reference/vec/max/#return-value","text":"A Vector containing the member-wise largest element of each input vector.","title":"Return value"},{"location":"reference/vec/max/#example","text":"#include vecpp/vecpp.h #include cassert int main() { using fVec2 = vecpp::Vec float, 2 ; fVec2 a = {10.0f, 5.0f}; fVec2 b = {5.0f, 6.0f}; fVec2 c = max(a,b); assert(c[0] == 10.0f); assert(c[1] == 6.0f); }","title":"Example"},{"location":"reference/vec/max/#see-also","text":"min : per-member min()","title":"See also"},{"location":"reference/vec/min/","text":"vecpp :: Vec typename, size_t> vecpp::min(vecpp::Vec) template typename T, std::size_t L constexpr Vec T,L min(const Vec T,L lhs, const Vec T,L rhs); Performs std::min() member-wise on two vectors. Parameters Argument Role lhs The first vector to consume rhs The second vector to consume Return value A Vector containing the member-wise smallest element of each input vector. Example #include vecpp/vecpp.h #include cassert int main() { using fVec2 = vecpp::Vec float, 2 ; fVec2 a = {10.0f, 5.0f}; fVec2 b = {5.0f, 6.0f}; fVec2 c = min(a,b); assert(c[0] == 5.0f); assert(c[1] == 5.0f); } See also max : per-member max()","title":"Min"},{"location":"reference/vec/min/#vecppminvecppvec","text":"template typename T, std::size_t L constexpr Vec T,L min(const Vec T,L lhs, const Vec T,L rhs); Performs std::min() member-wise on two vectors.","title":"vecpp::min(vecpp::Vec)"},{"location":"reference/vec/min/#parameters","text":"Argument Role lhs The first vector to consume rhs The second vector to consume","title":"Parameters"},{"location":"reference/vec/min/#return-value","text":"A Vector containing the member-wise smallest element of each input vector.","title":"Return value"},{"location":"reference/vec/min/#example","text":"#include vecpp/vecpp.h #include cassert int main() { using fVec2 = vecpp::Vec float, 2 ; fVec2 a = {10.0f, 5.0f}; fVec2 b = {5.0f, 6.0f}; fVec2 c = min(a,b); assert(c[0] == 5.0f); assert(c[1] == 5.0f); }","title":"Example"},{"location":"reference/vec/min/#see-also","text":"max : per-member max()","title":"See also"},{"location":"reference/vec/op_cmp/","text":"vecpp :: Vec typename, size_t> vecpp::operator==,!=(vecpp::Vec) 1) template typename T, std::size_t L constexpr bool operator==(const Vec T,L lhs, const Vec T,L rhs); 2) template typename T, std::size_t L constexpr bool operator!=(const Vec T,L lhs, const Vec T,L rhs); Compares vectrs for equality. Parameters Argument Role lhs The first vector to compare rhs The second vector to compare N.B. lhs and rhs must be the exact same vector type, mixed type comparisons are not supported. Return value 1) true if both vectors are equal element-wise 2) true if any element at a given index differs between the vectors Example #include vecpp/vecpp.h void foo() { constexpr vecpp::Vec float, 2 a = {1.0f, 1.0f}; constexpr vecpp::Vec float, 2 b = {1.0f, 1.0f}; constexpr vecpp::Vec float, 2 c = {1.0f, 2.0f}; static_assert(a == b); static_assert(a != c); }","title":"Op cmp"},{"location":"reference/vec/op_cmp/#vecppoperatorvecppvec","text":"1) template typename T, std::size_t L constexpr bool operator==(const Vec T,L lhs, const Vec T,L rhs); 2) template typename T, std::size_t L constexpr bool operator!=(const Vec T,L lhs, const Vec T,L rhs); Compares vectrs for equality.","title":"vecpp::operator==,!=(vecpp::Vec)"},{"location":"reference/vec/op_cmp/#parameters","text":"Argument Role lhs The first vector to compare rhs The second vector to compare N.B. lhs and rhs must be the exact same vector type, mixed type comparisons are not supported.","title":"Parameters"},{"location":"reference/vec/op_cmp/#return-value","text":"1) true if both vectors are equal element-wise 2) true if any element at a given index differs between the vectors","title":"Return value"},{"location":"reference/vec/op_cmp/#example","text":"#include vecpp/vecpp.h void foo() { constexpr vecpp::Vec float, 2 a = {1.0f, 1.0f}; constexpr vecpp::Vec float, 2 b = {1.0f, 1.0f}; constexpr vecpp::Vec float, 2 c = {1.0f, 2.0f}; static_assert(a == b); static_assert(a != c); }","title":"Example"},{"location":"reference/vec/op_per_mem/","text":"vecpp :: Vec typename, size_t> vecpp::operator+,-,*,/(vecpp::Vec) template typename T, std::size_t L constexpr Vec T,L operator+(const Vec T,L lhs, const Vec T,L rhs); template typename T, std::size_t L constexpr Vec T,L operator-(const Vec T,L lhs, const Vec T,L rhs); template typename T, std::size_t L constexpr Vec T,L operator*(const Vec T,L lhs, const Vec T,L rhs); template typename T, std::size_t L constexpr Vec T,L operator/(const Vec T,L lhs, const Vec T,L rhs); Performs binary operations member-wise on two vectors. Parameters Argument Role lhs The first vector to consume rhs The second vector to consume Return value A Vector containing the member-wise result of the binary operation applied on each input vector. Example #include vecpp/vecpp.h #include cassert int main() { using fVec2 = vecpp::Vec float, 2 ; fVec2 a = {10.0f, 5.0f}; fVec2 b = {5.0f, 6.0f}; fVec2 c = a + b; assert(c[0] == a[0] + b[0]); assert(c[1] == a[1] + b[1]); }","title":"Op per mem"},{"location":"reference/vec/op_per_mem/#vecppoperator-vecppvec","text":"template typename T, std::size_t L constexpr Vec T,L operator+(const Vec T,L lhs, const Vec T,L rhs); template typename T, std::size_t L constexpr Vec T,L operator-(const Vec T,L lhs, const Vec T,L rhs); template typename T, std::size_t L constexpr Vec T,L operator*(const Vec T,L lhs, const Vec T,L rhs); template typename T, std::size_t L constexpr Vec T,L operator/(const Vec T,L lhs, const Vec T,L rhs); Performs binary operations member-wise on two vectors.","title":"vecpp::operator+,-,*,/(vecpp::Vec)"},{"location":"reference/vec/op_per_mem/#parameters","text":"Argument Role lhs The first vector to consume rhs The second vector to consume","title":"Parameters"},{"location":"reference/vec/op_per_mem/#return-value","text":"A Vector containing the member-wise result of the binary operation applied on each input vector.","title":"Return value"},{"location":"reference/vec/op_per_mem/#example","text":"#include vecpp/vecpp.h #include cassert int main() { using fVec2 = vecpp::Vec float, 2 ; fVec2 a = {10.0f, 5.0f}; fVec2 b = {5.0f, 6.0f}; fVec2 c = a + b; assert(c[0] == a[0] + b[0]); assert(c[1] == a[1] + b[1]); }","title":"Example"},{"location":"reference/vec/op_per_mem_compound/","text":"vecpp :: Vec typename, size_t> vecpp::operator+=,-=,*=,/=(vecpp::Vec) template typename T, std::size_t L constexpr Vec T,L operator+=(Vec T,L lhs, const Vec T,L rhs); template typename T, std::size_t L constexpr Vec T,L operator-=(Vec T,L lhs, const Vec T,L rhs); template typename T, std::size_t L constexpr Vec T,L operator*=(Vec T,L lhs, const Vec T,L rhs); template typename T, std::size_t L constexpr Vec T,L operator/=(Vec T,L lhs, const Vec T,L rhs); Performs binary operations member-wise on two vectors, and updates the first with the result. Parameters Argument Role lhs The first vector to consume, and where the results are stored rhs The second vector to consume Return value A reference to lhs. Example #include vecpp/vecpp.h #include cassert int main() { using fVec2 = vecpp::Vec float, 2 ; fVec2 a = {10.0f, 5.0f}; fVec2 b = {5.0f, 6.0f}; a += b; assert(a[0] == 10.0f + 5.0f); assert(a[1] == 5.0f + 6.0f); }","title":"Op per mem compound"},{"location":"reference/vec/op_per_mem_compound/#vecppoperator-vecppvec","text":"template typename T, std::size_t L constexpr Vec T,L operator+=(Vec T,L lhs, const Vec T,L rhs); template typename T, std::size_t L constexpr Vec T,L operator-=(Vec T,L lhs, const Vec T,L rhs); template typename T, std::size_t L constexpr Vec T,L operator*=(Vec T,L lhs, const Vec T,L rhs); template typename T, std::size_t L constexpr Vec T,L operator/=(Vec T,L lhs, const Vec T,L rhs); Performs binary operations member-wise on two vectors, and updates the first with the result.","title":"vecpp::operator+=,-=,*=,/=(vecpp::Vec)"},{"location":"reference/vec/op_per_mem_compound/#parameters","text":"Argument Role lhs The first vector to consume, and where the results are stored rhs The second vector to consume","title":"Parameters"},{"location":"reference/vec/op_per_mem_compound/#return-value","text":"A reference to lhs.","title":"Return value"},{"location":"reference/vec/op_per_mem_compound/#example","text":"#include vecpp/vecpp.h #include cassert int main() { using fVec2 = vecpp::Vec float, 2 ; fVec2 a = {10.0f, 5.0f}; fVec2 b = {5.0f, 6.0f}; a += b; assert(a[0] == 10.0f + 5.0f); assert(a[1] == 5.0f + 6.0f); }","title":"Example"},{"location":"reference/vec/operator_at/","text":"vecpp :: Vec typename, size_t> vecpp::Vec::operator[]() constexpr T operator[](std::size_t i); constexpr const T operator[](std::size_t i) const; Parameters Argument Role i index of the element to access. Return value A reference to the requested element. N.B. Bounds checking is still performed in debug builds as a safety mechanism, but this should not be relied upon. See also at[] : bounds-checked access.","title":"Operator at"},{"location":"reference/vec/operator_at/#vecppvecoperator91","text":"constexpr T operator[](std::size_t i); constexpr const T operator[](std::size_t i) const;","title":"vecpp::Vec::operator[]()"},{"location":"reference/vec/operator_at/#parameters","text":"Argument Role i index of the element to access.","title":"Parameters"},{"location":"reference/vec/operator_at/#return-value","text":"A reference to the requested element.","title":"Return value"},{"location":"reference/vec/operator_at/#nb","text":"Bounds checking is still performed in debug builds as a safety mechanism, but this should not be relied upon.","title":"N.B."},{"location":"reference/vec/operator_at/#see-also","text":"at[] : bounds-checked access.","title":"See also"},{"location":"reference/vec/scaling/","text":"vecpp :: Vec typename, size_t> vecpp::operator*,/(vecpp::Vec, T) 1) template typename T, std::size_t L constexpr Vec T,L operator*(const Vec T,L vec, const T scale); template typename T, std::size_t L constexpr Vec T,L operator*(const T scale, const Vec T,L vec); 2) template typename T, std::size_t L constexpr Vec T,L operator/(Vec T,L vec, const T scale); Computes a vector representing the passed vector scaled by the operand. 1) Multiplies each member of the vector by the operand 2) Divides each member of the vector by the operand Parameters Argument Role vec The vector to scale scale The scaling operand Return value A vector equivalent to vec with each of its members scaled by scale N.B. The implementation of the library may choose to use operator*(T, T) or operator*=(T , T) interchangeably in order to implement this. If these two implementations are not consistent, then the result is undefined. Example #include vecpp/vecpp.h #include cassert int main() { using fVec2 = vecpp::Vec float, 2 ; fVec2 a = {10.0f, 5.0f}; fVec2 b = a * 3.0f; assert(b[0] == 3.0f * 10.0f); assert(b[1] == 3.0f * 5.0f); }","title":"Scaling"},{"location":"reference/vec/scaling/#vecppoperatorvecppvec-t","text":"1) template typename T, std::size_t L constexpr Vec T,L operator*(const Vec T,L vec, const T scale); template typename T, std::size_t L constexpr Vec T,L operator*(const T scale, const Vec T,L vec); 2) template typename T, std::size_t L constexpr Vec T,L operator/(Vec T,L vec, const T scale); Computes a vector representing the passed vector scaled by the operand. 1) Multiplies each member of the vector by the operand 2) Divides each member of the vector by the operand","title":"vecpp::operator*,/(vecpp::Vec, T)"},{"location":"reference/vec/scaling/#parameters","text":"Argument Role vec The vector to scale scale The scaling operand","title":"Parameters"},{"location":"reference/vec/scaling/#return-value","text":"A vector equivalent to vec with each of its members scaled by scale","title":"Return value"},{"location":"reference/vec/scaling/#nb","text":"The implementation of the library may choose to use operator*(T, T) or operator*=(T , T) interchangeably in order to implement this. If these two implementations are not consistent, then the result is undefined.","title":"N.B."},{"location":"reference/vec/scaling/#example","text":"#include vecpp/vecpp.h #include cassert int main() { using fVec2 = vecpp::Vec float, 2 ; fVec2 a = {10.0f, 5.0f}; fVec2 b = a * 3.0f; assert(b[0] == 3.0f * 10.0f); assert(b[1] == 3.0f * 5.0f); }","title":"Example"},{"location":"reference/vec/scaling_compound/","text":"vecpp :: Vec typename, size_t> vecpp::operator*=,/=(vecpp::Vec, T) 1) template typename T, std::size_t L constexpr Vec T,L operator*=(Vec T,L lhs, const T rhs); 2) template typename T, std::size_t L constexpr Vec T,L operator/=(Vec T,L lhs, const T rhs); Scales each member of the vector by the operand. 1) Multiplies each member of the vector by the operand 2) Divides each member of the vector by the operand Parameters Argument Role lhs The vector to scale rhs The scaling operand Return value A reference to lhs. Example #include vecpp/vecpp.h #include cassert int main() { using fVec2 = vecpp::Vec float, 2 ; fVec2 a = {10.0f, 5.0f}; a *= 3.0f; assert(a[0] == 3.0f * 10.0f); assert(a[1] == 3.0f * 5.0f); }","title":"Scaling compound"},{"location":"reference/vec/scaling_compound/#vecppoperatorvecppvec-t","text":"1) template typename T, std::size_t L constexpr Vec T,L operator*=(Vec T,L lhs, const T rhs); 2) template typename T, std::size_t L constexpr Vec T,L operator/=(Vec T,L lhs, const T rhs); Scales each member of the vector by the operand. 1) Multiplies each member of the vector by the operand 2) Divides each member of the vector by the operand","title":"vecpp::operator*=,/=(vecpp::Vec, T)"},{"location":"reference/vec/scaling_compound/#parameters","text":"Argument Role lhs The vector to scale rhs The scaling operand","title":"Parameters"},{"location":"reference/vec/scaling_compound/#return-value","text":"A reference to lhs.","title":"Return value"},{"location":"reference/vec/scaling_compound/#example","text":"#include vecpp/vecpp.h #include cassert int main() { using fVec2 = vecpp::Vec float, 2 ; fVec2 a = {10.0f, 5.0f}; a *= 3.0f; assert(a[0] == 3.0f * 10.0f); assert(a[1] == 3.0f * 5.0f); }","title":"Example"},{"location":"reference/vec/unary_minus/","text":"vecpp :: Vec typename, size_t> vecpp::operator-(vecpp::Vec) unary template typename T, std::size_t L constexpr Vec T,L operator-(const Vec T,L rhs); Returns the negated version of the vector Parameters Argument Role rhs The vector to negate Return value A vector equivalent to rhs where operator-() has been applied to it element-wise. Example #include vecpp/vecpp.h #include cassert int main() { using fVec2 = vecpp::Vec float, 2 ; fVec2 a = {10.0f, -5.0f}; fVec2 b = -a; assert(b[0] == -10.0f); assert(b[1] == 5.0f); }","title":"Unary minus"},{"location":"reference/vec/unary_minus/#vecppoperator-vecppvecunary","text":"template typename T, std::size_t L constexpr Vec T,L operator-(const Vec T,L rhs); Returns the negated version of the vector","title":"vecpp::operator-(vecpp::Vec)unary"},{"location":"reference/vec/unary_minus/#parameters","text":"Argument Role rhs The vector to negate","title":"Parameters"},{"location":"reference/vec/unary_minus/#return-value","text":"A vector equivalent to rhs where operator-() has been applied to it element-wise.","title":"Return value"},{"location":"reference/vec/unary_minus/#example","text":"#include vecpp/vecpp.h #include cassert int main() { using fVec2 = vecpp::Vec float, 2 ; fVec2 a = {10.0f, -5.0f}; fVec2 b = -a; assert(b[0] == -10.0f); assert(b[1] == 5.0f); }","title":"Example"},{"location":"user-guide/installation/","text":"Installation VecPP is a header-only library, so all you need to do is make the contents of the include/ directory available to your compiler. CMake You can use CMake (3.9 or above) to compile the tests and install the library. On Linux: mkdir bld cd bld cmake -DCMAKE_INSTALL_PREFIX=insert/install/path/here .. make make test make install","title":"Installation"},{"location":"user-guide/installation/#installation","text":"VecPP is a header-only library, so all you need to do is make the contents of the include/ directory available to your compiler.","title":"Installation"},{"location":"user-guide/installation/#cmake","text":"You can use CMake (3.9 or above) to compile the tests and install the library. On Linux: mkdir bld cd bld cmake -DCMAKE_INSTALL_PREFIX=insert/install/path/here .. make make test make install","title":"CMake"}]}